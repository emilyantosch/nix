// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction

// Add lines like this to spawn processes at startup.
// spawn-at-startup "ironbar"
spawn-at-startup "xwayland-satellite"
spawn-at-startup "plasma-polkit-agent"
// spawn-sh-at-startup "swww-daemon &"
// spawn-sh-at-startup "swww img  ~/.current-wallpaper"
// spawn-sh-at-startup "~/.config/nixos/scripts/swww/swww_wallpapersync.sh"
// spawn-sh-at-startup "qs -c ~/.config/nixos/ressources/quickshell/noctalia-shell" //shellscript to start automatically (quickshell in this case)

spawn-at-startup "vesktop"
// spawn-at-startup "foot"
// spawn-at-startup "zen-twilight"
spawn-at-startup "obsidian"

spawn-at-startup "sh" "-c" "systemctl --user start xwayland-satellite.service"
// spawn-at-startup "sh" "-c" "noctalia-shell"
spawn-at-startup "sh" "-c" "caelestia-shell"

// spawn-at-startup "sh" "-c" "wl-clip-persist --clipboard regular"
// spawn-at-startup "sh" "-c" "cliphist wipe"
// spawn-at-startup "sh" "-c" "systemctl --user start cliphist.service"
// spawn-at-startup "sh" "-c" "systemctl --user start hypridle.service"
// spawn-at-startup "sh" "-c" "ironbar"
// spawn-at-startup "sh" "-c" "systemctl --user start swaybg.service"
// spawn-at-startup "sh" "-c" "systemctl --user start swaync.service"
// spawn-at-startup "sh" "-c" "sleep 1 && blueman-applet"
// spawn-at-startup "sh" "-c" "sleep 3 && syncthingtray --wait"
// spawn-at-startup "sh" "-c" "id=0"
// spawn-at-startup "swayosd-server"
// spawn-at-startup "nm-applet"

cursor {
    xcursor-theme "default"
    xcursor-size 24
    // hide-when-typing
    // hide-after-inactive-ms 1000 
}
// OVERVIEW SETTINGS
overview {
  // zoom 0.65
  // backdrop-color "#777777"
//   workspace-shadow {
//     // off
//     softness 40
//     spread 10
//     offset x=0 y=10
//     color "#00000050"
// }
}
// Disable the hot corners.
gestures {
    dnd-edge-view-scroll {
        trigger-width 30
        delay-ms 100
        max-speed 1500
    }

    dnd-edge-workspace-switch {
        trigger-height 50
        delay-ms 100
        max-speed 1500
    }

    hot-corners {
        // off
    }
}
// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
  // Focus windows and outputs automatically when moving the mouse into them.
  // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
  // focus-follows-mouse max-scroll-amount="0%"
  // Uncomment this to make the mouse warp to the center of newly focused windows.
  // Allow focus-follows-mouse only when it will not scroll the view.
  focus-follows-mouse max-scroll-amount="25%"
  warp-mouse-to-focus mode="center-xy"
  disable-power-key-handling
  workspace-auto-back-and-forth
  // mod-key "Super"
  // mod-key-nested "Alt"
  keyboard {
    xkb {
      // You can set rules, model, layout, variant and options.
      // For more information, see xkeyboard-config(7).
      layout "de"
      model ""
      rules ""
      variant "altgr-intl,"
      options "grp:win_space_toggle"
      // For example:
      // layout "us,ru"
      // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
    }
    // Enable numlock on startup, omitting this setting disables it.
    numlock
    // repeat-delay 600
    // repeat-rate 25
    track-layout "global" //window if kb layout should be adjustable per window
  }
  // Next sections include libinput settings.
  // Omitting settings disables them, or leaves them at their default values.
  touchpad {
        // off
        tap
        // dwt //disab;e when typing
        // dwtp //disable when trackpointing
        // drag true //false
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-factor 1.0
        // scroll-factor vertical=1.0 horizontal=-2.0
        // scroll-method "two-finger"
        // scroll-button 273
        // scroll-button-lock
        // tap-button-map "left-middle-right"
        // click-method "clickfinger"
        // left-handed
        // disabled-on-external-mouse
        // middle-emulation
  }
  mouse {
        // off
        // natural-scroll
        // accel-speed 0.2 //0.5
        // accel-profile "flat"
        // scroll-factor 1.0
        // scroll-factor vertical=1.0 horizontal=-2.0
        // scroll-method "no-scroll"
        // scroll-button 273
        // scroll-button-lock
        // left-handed
        // middle-emulation
  }
  trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // scroll-button-lock
        // left-handed
        // middle-emulation
  }
  trackball {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // scroll-button-lock
        // left-handed
        // middle-emulation
  }
  tablet {
    // off
    map-to-output "DP-2"
    // left-handed
    // calibration-matrix 1.0 0.0 0.0 0.0 1.0 0.0 // interesting for osu
  }
  touch {
    // off
    map-to-output "eDP-1"
  }
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!

// output "DP-2" {
//     variable-refresh-rate // on-demand=true
//     scale 1.000000
//     transform "normal"
//     position x=0 y=0
//     mode "3840x2160@143.851000"
//     focus-at-startup
//     // background-color "#003300" //just for testing unsure what its doing
//     // backdrop-color "#001100" //color between workspaces
// }
// output "HDMI-A-1" {
//     scale 1.000000
//     transform "90"
//     position x=-1080 y=0
//     mode "1920x1080@239.964000"
// }

// PC Home
output "Microstep MAG 274URFW 0x00000001" {
    variable-refresh-rate // on-demand=true
    scale 1.000000
    transform "normal"
    position x=0 y=0
    mode "3840x2160@143.851000"
    focus-at-startup
    // background-color "#003300" //just for testing unsure what its doing
    // backdrop-color "#001100" //color between workspaces
}

output "Microstep MAG 274URFW 0x00000002" {
    variable-refresh-rate // on-demand=true
    scale 1.000000
    transform "normal"
    position x=-2160 y=0
    mode "2160x3840@143.851000"
    focus-at-startup
    // background-color "#003300" //just for testing unsure what its doing
    // backdrop-color "#001100" //color between workspaces
}
// END PC Home

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.


// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    gaps 10
    // gaps -10

    center-focused-column "never"
    // center-focused-column "always"
    // center-focused-column "on-overflow"
    always-center-single-column
    // empty-workspace-above-first
    // default-column-display "tabbed"
    // background-color "#003300" //default workspace color

    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
        fixed 1920
    }

    default-column-width { proportion 0.55; }
    // New windows decide their initial width themselves.
    // default-column-width { }

    preset-window-heights {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
        fixed 1080
    }
    focus-ring {
        // off
        width 3
        active-color "#57457f"
        inactive-color "#505050"
        // urgent-color "#9b0000"
        // active-gradient from="#80c8ff" to="#bbddff" angle=45
        // active-gradient from="#f00f" to="#0f05" angle=45 in="oklch longer hue" relative-to="workspace-view"
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
        urgent-gradient from="#800" to="#a33" angle=45
    }
    border {
        off
        width 3
        // active-color "#ffc87f"
        // inactive-color "#505050"
        urgent-color "#9b0000"
        active-gradient from="#f00f" to="#0f05" angle=45 in="oklch longer hue" relative-to="workspace-view"
        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view" in="srgb-linear"
        // urgent-gradient from="#800" to="#a33" angle=45
    }
    shadow {
        // on
        softness 30
        spread 5
        offset x=0 y=5
        // draw-behind-window true
        color "#00000070"
        // inactive-color "#00000054"
    }
    tab-indicator {
        // off
        hide-when-single-tab
        place-within-column
        gap 5
        width 4
        length total-proportion=1.0
        position "right"
        gaps-between-tabs 2
        corner-radius 8
        active-color "red"
        inactive-color "gray"
        urgent-color "blue"
        // active-gradient from="#80c8ff" to="#bbddff" angle=45
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
        // urgent-gradient from="#800" to="#a33" angle=45
    }
    insert-hint {
        // off
        color "#ffc87f80"
        // gradient from="#ffbb6680" to="#ffc88080" angle=45 relative-to="workspace-view"
    }
    struts {
        left 10
        right 10
        top 10
        bottom 10
    }

    // Set gaps around windows in logical pixels.
    // gaps 10

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    // center-focused-column "on-overflow"
    // center-focused-column "always"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    // preset-column-width
    //     // Proportion sets the width as a fraction of the output width, taking gaps into account.
    //     // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
    //     // The default preset widths are 1/3, 1/2 and 2/3 of the output.
    //     proportion 0.33333
    //     proportion 0.5
    //     proportion 0.66667
    //
    //     // Fixed sets the width in logical pixels exactly.
    //     // fixed 1920
    // }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    // preset-window-heights { }

    // You can change the default width of the new windows.
    // default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.
    // perfer-no-csd

    // You can change how the focus ring looks.
    // focus-ring {
    //     // Uncomment this line to disable the focus ring.
    //     // off
    //
    //     // How many logical pixels the ring extends out from the windows.
    //     width 2
    //
    //     // Colors can be set in a variety of ways:
    //     // - CSS named colors: "red"
    //     // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
    //     // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.
    //
    //     // Color of the ring on the active monitor.
    //     active-color "#7fc8ff"
    //
    //     // Color of the ring on inactive monitors.
    //     inactive-color "#505050"
    //
    //     // You can also use gradients. They take precedence over solid colors.
    //     // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
    //     // The angle is the same as in linear-gradient, and is optional,
    //     // defaulting to 180 (top-to-bottom gradient).
    //     // You can use any CSS linear-gradient tool on the web to set these up.
    //     // Changing the color space is also supported, check the wiki for more info.
    //     //
    //     // active-gradient from="#80c8ff" to="#bbddff" angle=45
    //
    //     // You can also color the gradient relative to the entire view
    //     // of the workspace, rather than relative to just the window itself.
    //     // To do that, set relative-to="workspace-view".
    //     //
    //     // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    // }

    // You can also add a border. It's similar to the focus ring, but always visible.
    // border {
    //     // The settings are the same as for the focus ring.
    //     // If you enable the border, you probably want to disable the focus ring.
    //     off
    //
    //     width 2
    //     active-color "#ffc87f"
    //     inactive-color "#505050"
    //
    //     // Color of the border around windows that request your attention.
    //     urgent-color "#9b0000"
    //
    //     // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
    //     // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    // }

    // You can enable drop shadows for windows.
    // shadow {
    //     // Uncomment the next line to enable shadows.
    //     // on
    //
    //     // By default, the shadow draws only around its window, and not behind it.
    //     // Uncomment this setting to make the shadow draw behind its window.
    //     //
    //     // Note that niri has no way of knowing about the CSD window corner
    //     // radius. It has to assume that windows have square corners, leading to
    //     // shadow artifacts inside the CSD rounded corners. This setting fixes
    //     // those artifacts.
    //     // 
    //     // However, instead you may want to set prefer-no-csd and/or
    //     // geometry-corner-radius. Then, niri will know the corner radius and
    //     // draw the shadow correctly, without having to draw it behind the
    //     // window. These will also remove client-side shadows if the window
    //     // draws any.
    //     // 
    //     // draw-behind-window true
    //
    //     // You can change how shadows look. The values below are in logical
    //     // pixels and match the CSS box-shadow properties.
    //
    //     // Softness controls the shadow blur radius.
    //     softness 30
    //
    //     // Spread expands the shadow.
    //     spread 5
    //
    //     // Offset moves the shadow relative to the window.
    //     offset x=0 y=5
    //
    //     // You can also change the shadow color and opacity.
    //     color "#0007"
    // }
    //
    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    // struts {
    //     left 20
    //     right 20
    //     top 20
    //     bottom 20
    // }
  // tab-indicator {
  //   place-within-column
  //   gap 8
  //   width 4
  //   length total-proportion=1.000000
  //   position "top"
  //   gaps-between-tabs 8
  //   corner-radius 8
  //   active-color "rgba(224, 224, 224, 100%)"
  //   inactive-color "rgba(224, 224, 224, 30%)"
  // }
  // insert-hint { color "rgba(224, 224, 224, 30%)"; }
  // default-column-width { proportion 0.500000; }
  // preset-column-widths {
  //   proportion 0.333333
  //   proportion 0.500000
  //   proportion 0.666667
  // }
  // preset-window-heights {
  //   proportion 0.333333
  //   proportion 0.500000
  //   proportion 0.666667
  //   proportion 1.000000
  // }
  // center-focused-column "never"
}
window-rule {
    geometry-corner-radius 20
    clip-to-geometry true
}

layer-rule {
    match namespace="^quickshell-wallpaper$"
}

layer-rule {
    match namespace="^quickshell-overview$"
    place-within-backdrop true
}
// window-rule {
//     draw-border-with-background false
//     geometry-corner-radius 12.000000 12.000000 12.000000 12.000000
//     clip-to-geometry true
// }
window-rule {
    match app-id=".blueman-manager-wrapped"
    match app-id="nm-connection-editor"
    match app-id="com.saivert.pwvucontrol"
    match app-id="org.pipewire.Helvum"
    match app-id="wdisplays"
    match app-id="qalculate-gtk"
    match title="Syncthing Tray"
    open-floating true
}
window-rule {
    match is-window-cast-target=true
    focus-ring {
        active-color "rgba(224, 53, 53, 100%)"
        inactive-color "rgba(224, 53, 53, 30%)"
    }
    tab-indicator {
        active-color "rgba(224, 53, 53, 100%)"
        inactive-color "rgba(224, 53, 53, 30%)"
    }
    opacity 0.960000
}

// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
screenshot-path "~/Pictures/Screenshots/%Y-%m-%d-%H%M%S.png"
// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
animations {
    // Uncomment to turn off all animations.
    // You can also put "off" into each individual animation to disable it.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0

    // Individual animations.

    workspace-switch {
        spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
    }

    window-open {
        duration-ms 150
        curve "ease-out-expo"
    }

    window-close {
        duration-ms 150
        curve "ease-out-quad"
        // Same as CSS cubic-bezier(0.05, 0.7, 0.1, 1)
        // curve "cubic-bezier" 0.05 0.7 0.1 1
    }
    // window-close {
    //       custom-shader r"
    //           vec4 close_color(vec3 coords_geo, vec3 size_geo) {
    //               vec4 color = vec4(0.0);
    //
    //               if (0.0 <= coords_geo.x && coords_geo.x <= 1.0
    //                       && 0.0 <= coords_geo.y && coords_geo.y <= 1.0)
    //               {
    //                   vec4 from = vec4(1.0, 0.0, 0.0, 1.0);
    //                   vec4 to = vec4(0.0, 1.0, 0.0, 1.0);
    //                   color = mix(from, to, coords_geo.y);
    //               }
    //
    //               return color * (1.0 - niri_clamped_progress);
    //           }
    //       "
    //   }
    //
    horizontal-view-movement {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    window-movement {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    window-resize {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    config-notification-open-close {
        spring damping-ratio=0.6 stiffness=1000 epsilon=0.001
    }

    // exit-confirmation-open-close {
    //     spring damping-ratio=0.6 stiffness=500 epsilon=0.01
    // }

    screenshot-ui-open {
        duration-ms 200
        curve "ease-out-quad"
    }

    overview-open-close {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }
}


// hotkey-overlay { skip-at-startup; }
environment {
    ELECTRON_OZONE_PLATFORM_HINT "auto"
    DISPLAY ":1" //or :0
    // DISPLAY null //or :0
    CLUTTER_BACKEND "wayland"
    QT_QPA_PLATFORM "wayland"
    "ELM_DISPLAY" "wl"
    "GDK_BACKEND" "wayland,x11"
    "QT_WAYLAND_DISABLE_WINDOWDECORATION" "1"
    "SDL_VIDEODRIVER" "wayland"
}



// // Make the wallpaper stationary, rather than moving with workspaces.
// layer-rule {
//     // This is for swaybg; change for other wallpaper tools.
//     // Find the right namespace by running niri msg layers.
//     match namespace="^wallpaper$"
//     place-within-backdrop true
// }
//
// // Set transparent workspace background color.
// layout {
//     background-color "transparent"
// }
//
// // Optionally, disable the workspace shadows in the overview.
// overview {
//     workspace-shadow {
//         off
//     }
// }

switch-events {
    lid-close { spawn "notify-send" "The laptop lid is closed!"; } //not needed
    lid-open { spawn "notify-send" "The laptop lid is open!"; } //not rly needed, lid function is automatically configured
    tablet-mode-on { spawn "bash" "-c" "gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled true"; }
    tablet-mode-off { spawn "bash" "-c" "gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled false"; }
}


workspace "docu/tasks"
workspace "chat" // { open-on-output "Vertical monitor pls" }
workspace "browser"
// workspace "dev" // maybe merge browser and dev?
workspace "work"
// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
    // This app-id regular expression will work for both:
    // - host Firefox (app-id is "firefox")
    // - Flatpak Firefox (app-id is "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}
window-rule {
    match app-id="steam" title=r#"^notificationtoasts_\d+_desktop$"#
    default-floating-position x=10 y=10 relative-to="bottom-right"
}
// set-dynamic-cast-window
// set-dynamic-cast-monitor
// clear-dynamic-cast-target


// Open Fractal on the "chat" workspace, if it runs at niri startup.
window-rule {
    match at-startup=true app-id=r#"^org\.gnome\.Fractal$"#
    open-on-workspace "chat"
}
window-rule {
    // match at-startup=true app-id="obsidian"
    // match at-startup=true app-id="ticktick"
    match app-id="obsidian"
    match app-id="ticktick"
    open-on-workspace "docu/tasks"
}
window-rule {
    match at-startup=true app-id="vesktop"
    match app-id="vesktop"
    match app-id="steam"
    open-on-workspace "chat"
}
// window-rule {
//     match at-startup=true app-id="foot"
//     open-on-workspace "dev"
// }
window-rule {
    match app-id="teams-for-linux"
    match app-id="microsoft-edge"
    open-on-workspace "work"
}
// ROUNDED corners
// window-rule {
//     geometry-corner-radius 2
//     clip-to-geometry true
// }
// Put swaybg inside the overview backdrop. might not work with swww
layer-rule {
    match namespace="^wallpaper$"
    place-within-backdrop true
}
//SCREENCASTING BLACKOUT
// Block out password managers from screencasts.
window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screencast"
}
// Block out mako notifications from screencasts.
layer-rule {
    match namespace="^notifications$"

    block-out-from "screencast"
}
// Indicate screencasted windows with red colors.
window-rule {
    match is-window-cast-target=true

    focus-ring {
        active-color "#7d0d2d"
        inactive-color "#f38ba8"
    }

    border {
        inactive-color "#7d0d2d"
    }

    shadow {
        color "#7d0d2d70"
    }

    tab-indicator {
        active-color "#f38ba8"
        inactive-color "#7d0d2d"
    }
}
// For some reason, DMABUF screencasts are disabled in the Zen Browser, so screencasting doesn't work out of the box on niri. To fix it, open about:config and set widget.dmabuf.force-enabled to true.



// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
// /-window-rule {
//     geometry-corner-radius 12
//     clip-to-geometry true
// }

binds {
    Mod+Shift+M { spawn "~/.config/nixos/scripts/wall_cycle.sh"; }
    Mod+Shift+N { spawn "~/.config/nixos/scripts/wall_cycle_back.sh"; }
    Mod+Shift+Slash { show-hotkey-overlay; }

    Super+Escape { spawn "hyprlock"; }
    Super+A { spawn "sherlock"; }
    Super+T { spawn "foot"; }
    Mod+Y { spawn "zen-twilight"; }
    Mod+B { spawn "microsoft-edge"; }
    Mod+E { spawn "dolphin"; }
    Super+Q { close-window; }

    // Ctrl+Alt+C { spawn "sh" "-c" "pidof wl-color-picker || wl-color-picker"; }
    Mod+Shift+W { switch-preset-column-width; }
    Mod+Shift+E { switch-preset-window-height; }

    Mod+G { toggle-column-tabbed-display; }

    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }
    // Center all fully visible columns on screen.
    Mod+Ctrl+C { center-visible-columns; }
    Mod+C { center-column; }
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }
    Mod+Shift+H { set-column-width "-10%"; }
    Mod+Shift+L { set-column-width "+10%"; }
    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }
    Mod+Shift+K { set-window-height "-10%"; }
    Mod+Shift+J { set-window-height "+10%"; }

    Super+W { toggle-window-floating; }
    Mod+Shift+F { switch-focus-between-floating-and-tiling; }
    // Ctrl+Alt+Tab { toggle-column-tabbed-display; }
  
    Alt+Return { fullscreen-window; }
    Mod+Return { maximize-column; }
    Mod+Alt+Return { expand-column-to-available-width; }
    Mod+Alt+F { toggle-windowed-fullscreen; }
    Super+Ctrl+Return { move-window-to-monitor-next; }

    Print { screenshot; }
    Alt+Print { screenshot-screen; }
    Mod+Shift+S { screenshot-window; }

    Super+0 { focus-workspace 10; }
    Super+1 { focus-workspace 1; }
    Super+2 { focus-workspace 2; }
    Super+3 { focus-workspace 3; }
    Super+4 { focus-workspace 4; }
    Super+5 { focus-workspace 5; }
    Super+6 { focus-workspace 6; }
    Super+7 { focus-workspace 7; }
    Super+8 { focus-workspace 8; }
    Super+9 { focus-workspace 9; }
    Alt+Tab { focus-workspace-previous; }
    Mod+Tab repeat=false { toggle-overview; }

    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // set-workspace-name "browser"
    Mod+Ctrl+O { focus-workspace "docu/tasks"; }
    Mod+Ctrl+Y { focus-workspace "browser"; } //maybe main
    // Mod+Ctrl+C { focus-workspace "chat"; }
    Mod+Ctrl+B { focus-workspace "work"; }
    Mod+Ctrl+W { focus-workspace "work"; }

    Super+L { focus-column-or-monitor-right; }
    Super+H { focus-column-or-monitor-left; }
    Super+J { focus-window-or-monitor-down; }
    Super+K { focus-window-or-monitor-up; }

    Super+Right { focus-column-or-monitor-right; }
    Super+Left { focus-column-or-monitor-left; }
    Super+Up { focus-window-or-monitor-up; }
    Super+Down { focus-window-or-monitor-down; }

    Mod+Ctrl+H { focus-monitor-left; }
    Mod+Ctrl+J { focus-workspace-down; }
    Mod+Ctrl+K { focus-workspace-up; }
    Mod+Ctrl+L { focus-monitor-right; }

    Mod+Ctrl+Left { focus-workspace-up; }
    Mod+Ctrl+Right { focus-workspace-down; }
    Mod+Ctrl+Up { focus-workspace-up; }
    Mod+Ctrl+Down { focus-workspace-down; }

    Super+Ctrl+Shift+H { consume-or-expel-window-left; }
    Super+Ctrl+Shift+J { move-window-down-or-to-workspace-down; }
    Super+Ctrl+Shift+K { move-window-up-or-to-workspace-up; }
    Super+Ctrl+Shift+L { consume-or-expel-window-right; }
    Super+Ctrl+Shift+Right { consume-or-expel-window-right; }
    Super+Ctrl+Shift+Left { consume-or-expel-window-left; }
    Super+Ctrl+Shift+Up { move-window-up-or-to-workspace-up; }
    Super+Ctrl+Shift+Down { move-window-down-or-to-workspace-down; }

    Mod+Alt+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    Mod+Alt+Shift+Ctrl+Right { move-workspace-to-monitor-right; }
    Mod+Alt+Shift+Ctrl+H { move-workspace-to-monitor-previous; }
    Mod+Alt+Shift+Ctrl+L { move-workspace-to-monitor-next; }

    // Mod+Alt+Ctrl+Left { move-column-to-monitor-left; }
    // Mod+Alt+Ctrl+Right { move-column-to-monitor-right; }
    // Mod+Alt+Ctrl+H { move-coklumn-to-monitor-left; }
    // Mod+Alt+Ctrl+L { move-column-to-monitor-right; }

    Mod+Alt+Ctrl+Left { move-window-to-monitor-left; }
    Mod+Alt+Ctrl+Right { move-window-to-monitor-right; }
    Mod+Alt+Ctrl+H { move-window-to-monitor-left; }
    Mod+Alt+Ctrl+L { move-window-to-monitor-right; }

    Mod+Shift+Ctrl+T { toggle-debug-tint; }
    Mod+Shift+Ctrl+O { debug-toggle-opaque-regions; }
    Mod+Shift+Ctrl+D { debug-toggle-damage; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Alt+Home { move-column-to-first; }
    Mod+Ctrl+Alt+End  { move-column-to-last; }
//
//     Mod+Shift+Left  { focus-monitor-left; }
//     Mod+Shift+Down  { focus-monitor-down; }
//     Mod+Shift+Up    { focus-monitor-up; }
//     Mod+Shift+Right { focus-monitor-right; }
//     Mod+Shift+H     { focus-monitor-left; }
//     Mod+Shift+J     { focus-monitor-down; }
//     Mod+Shift+K     { focus-monitor-up; }
//     Mod+Shift+L     { focus-monitor-right; }
//
//     Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
//     Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
//     Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
//     Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
//     Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
//     Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
//     Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
//     Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }
  
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Shift+WheelScrollDown { move-column-right; }
    Mod+Shift+WheelScrollUp   { move-column-left; }
    Mod+Ctrl+WheelScrollRight { focus-column-right; }
    Mod+Ctrl+WheelScrollLeft        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }
  
    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "2%+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "2%-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    XF86AudioNext { spawn "playerctl next"; }
    XF86AudioPlay { spawn "playerctl play-pause"; }
    XF86AudioPrev { spawn "playerctl previous"; }
    XF86MonBrightnessDown     allow-when-locked=true { spawn "brightnessctl" "s" "10%-"; }
    XF86MonBrightnessUp     allow-when-locked=true { spawn "brightnessctl" "s" "10%+"; }
    // XF86PowerOff { spawn "sh" "-c" "pidof wofi-power-menu || wofi-power-menu"; }
}

// binds {
//     // Keys consist of modifiers separated by + signs, followed by an XKB key name
//     // in the end. To find an XKB name for a particular key, you may use a program
//     // like wev.
//     //
//     // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
//     // when running as a winit window.
//     //
//     // Most actions that you can bind here can also be invoked programmatically with
//     // `niri msg action do-something`.
//
//     // Mod-Shift-/, which is usually the same as Mod-?,
//     // shows a list of important hotkeys.
//     Mod+Shift+Slash { show-hotkey-overlay; }
//
//     // Suggested binds for running programs: terminal, app launcher, screen locker.
//     Mod+T hotkey-overlay-title="Open a Terminal: alacritty" { spawn "alacritty"; }
//     Mod+D hotkey-overlay-title="Run an Application: fuzzel" { spawn "fuzzel"; }
//     Sper+Alt+L hotkey-overlay-title="Lock the Screen: swaylock" { spawn "swaylock"; }
//
//     // You can also use a shell. Do this if you need pipes, multiple commands, etc.
//     // Note: the entire command goes as a single argument in the end.
//     // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }
//
//     // Example volume keys mappings for PipeWire & WirePlumber.
//     // The allow-when-locked=true property makes them work even when the session is locked.
//     XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
//     XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
//     XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
//     XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
//
//     // Open/close the Overview: a zoomed-out view of workspaces and windows.
//     // You can also move the mouse into the top-left hot corner,
//     // or do a four-finger swipe up on a touchpad.
//     Mod+O repeat=false { toggle-overview; }
//
//     Mod+Q { close-window; }
//
//     Mod+Left  { focus-column-left; }
//     Mod+Down  { focus-window-down; }
//     Mod+Up    { focus-window-up; }
//     Mod+Right { focus-column-right; }
//     Mod+H     { focus-column-left; }
//     Mod+J     { focus-window-down; }
//     Mod+K     { focus-window-up; }
//     Mod+L     { focus-column-right; }
//
//     Mod+Ctrl+Left  { move-column-left; }
//     Mod+Ctrl+Down  { move-window-down; }
//     Mod+Ctrl+Up    { move-window-up; }
//     Mod+Ctrl+Right { move-column-right; }
//     Mod+Ctrl+H     { move-column-left; }
//     Mod+Ctrl+J     { move-window-down; }
//     Mod+Ctrl+K     { move-window-up; }
//     Mod+Ctrl+L     { move-column-right; }
//
//     // Alternative commands that move across workspaces when reaching
//     // the first or last window in a column.
//     // Mod+J     { focus-window-or-workspace-down; }
//     // Mod+K     { focus-window-or-workspace-up; }
//     // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
//     // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }
//
//     Mod+Home { focus-column-first; }
//     Mod+End  { focus-column-last; }
//     Mod+Ctrl+Home { move-column-to-first; }
//     Mod+Ctrl+End  { move-column-to-last; }
//
//     Mod+Shift+Left  { focus-monitor-left; }
//     Mod+Shift+Down  { focus-monitor-down; }
//     Mod+Shift+Up    { focus-monitor-up; }
//     Mod+Shift+Right { focus-monitor-right; }
//     Mod+Shift+H     { focus-monitor-left; }
//     Mod+Shift+J     { focus-monitor-down; }
//     Mod+Shift+K     { focus-monitor-up; }
//     Mod+Shift+L     { focus-monitor-right; }
//
//     Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
//     Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
//     Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
//     Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
//     Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
//     Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
//     Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
//     Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }
//
//     // Alternatively, there are commands to move just a single window:
//     // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
//     // ...
//
//     // And you can also move a whole workspace to another monitor:

      // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
      // Mod+Shift+Ctrl+Right { move-workspace-to-monitor-right; }
      // Mod+Shift+Ctrl+l { move-workspace-to-monitor-next; }
      // Mod+Shift+Ctrl+h { move-workspace-to-monitor-previous; }
      // set-workspace-name "browser"
      // focus-workspace "browser"

//     // ...
//
//     Mod+Page_Down      { focus-workspace-down; }
//     Mod+Page_Up        { focus-workspace-up; }
//     Mod+U              { focus-workspace-down; }
//     Mod+I              { focus-workspace-up; }
//     Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
//     Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
//     Mod+Ctrl+U         { move-column-to-workspace-down; }
//     Mod+Ctrl+I         { move-column-to-workspace-up; }
//
//     // Alternatively, there are commands to move just a single window:
//     // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
//     // ...
//
//     Mod+Shift+Page_Down { move-workspace-down; }
//     Mod+Shift+Page_Up   { move-workspace-up; }
//     Mod+Shift+U         { move-workspace-down; }
//     Mod+Shift+I         { move-workspace-up; }
//
//     // You can bind mouse wheel scroll ticks using the following syntax.
//     // These binds will change direction based on the natural-scroll setting.
//     //
//     // To avoid scrolling through workspaces really fast, you can use
//     // the cooldown-ms property. The bind will be rate-limited to this value.
//     // You can set a cooldown on any bind, but it's most useful for the wheel.
//     Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
//     Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
//     Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
//     Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }
//
//     Mod+WheelScrollRight      { focus-column-right; }
//     Mod+WheelScrollLeft       { focus-column-left; }
//     Mod+Ctrl+WheelScrollRight { move-column-right; }
//     Mod+Ctrl+WheelScrollLeft  { move-column-left; }
//
//     // Usually scrolling up and down with Shift in applications results in
//     // horizontal scrolling; these binds replicate that.
//     Mod+Shift+WheelScrollDown      { focus-column-right; }
//     Mod+Shift+WheelScrollUp        { focus-column-left; }
//     Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
//     Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }
//
//     // Similarly, you can bind touchpad scroll "ticks".
//     // Touchpad scrolling is continuous, so for these binds it is split into
//     // discrete intervals.
//     // These binds are also affected by touchpad's natural-scroll, so these
//     // example binds are "inverted", since we have natural-scroll enabled for
//     // touchpads by default.
//     // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
//     // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }
//
//     // You can refer to workspaces by index. However, keep in mind that
//     // niri is a dynamic workspace system, so these commands are kind of
//     // "best effort". Trying to refer to a workspace index bigger than
//     // the current workspace count will instead refer to the bottommost
//     // (empty) workspace.
//     //
//     // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
//     // will all refer to the 3rd workspace.
//     Mod+1 { focus-workspace 1; }
//     Mod+2 { focus-workspace 2; }
//     Mod+3 { focus-workspace 3; }
//     Mod+4 { focus-workspace 4; }
//     Mod+5 { focus-workspace 5; }
//     Mod+6 { focus-workspace 6; }
//     Mod+7 { focus-workspace 7; }
//     Mod+8 { focus-workspace 8; }
//     Mod+9 { focus-workspace 9; }
//     Mod+Ctrl+1 { move-column-to-workspace 1; }
//     Mod+Ctrl+2 { move-column-to-workspace 2; }
//     Mod+Ctrl+3 { move-column-to-workspace 3; }
//     Mod+Ctrl+4 { move-column-to-workspace 4; }
//     Mod+Ctrl+5 { move-column-to-workspace 5; }
//     Mod+Ctrl+6 { move-column-to-workspace 6; }
//     Mod+Ctrl+7 { move-column-to-workspace 7; }
//     Mod+Ctrl+8 { move-column-to-workspace 8; }
//     Mod+Ctrl+9 { move-column-to-workspace 9; }
//
//     // Alternatively, there are commands to move just a single window:
//     // Mod+Ctrl+1 { move-window-to-workspace 1; }
//
//     // Switches focus between the current and the previous workspace.
// Mod+Tab { focus-workspace-previous; }
// Alt+Tab { focus-workspace-previous; }
//
//     // The following binds move the focused window in and out of a column.
//     // If the window is alone, they will consume it into the nearby column to the side.
//     // If the window is already in a column, they will expel it out.
//     Mod+BracketLeft  { consume-or-expel-window-left; }
//     Mod+BracketRight { consume-or-expel-window-right; }
//     Mod+Ctrl+F { expand-column-to-available-width; }
//
//     // Center all fully visible columns on screen.
//     Mod+Ctrl+C { center-visible-columns; }
//
//     Mod+C { center-column; }
//     Mod+Minus { set-column-width "-10%"; }
//     Mod+Equal { set-column-width "+10%"; }
//
//     // Finer height adjustments when in column with other windows.
//     Mod+Shift+Minus { set-window-height "-10%"; }
//     Mod+Shift+Equal { set-window-height "+10%"; }
// Mod+g { toggle-column-tabbed-display; }
//
//     // Consume one window from the right to the bottom of the focused column.
//     Mod+Comma  { consume-window-into-column; }
//     // Expel the bottom window from the focused column to the right.
//     Mod+Period { expel-window-from-column; }
//
//     Mod+R { switch-preset-column-width; }
//     Mod+Shift+R { switch-preset-window-height; }
//     Mod+Ctrl+R { reset-window-height; }
//     Mod+F { maximize-column; }
//     Mod+Shift+F { fullscreen-window; }
//
//     // Expand the focused column to space not taken up by other fully visible columns.
//     // Makes the column "fill the rest of the space".
//     Mod+Ctrl+F { expand-column-to-available-width; }
//
//     // Center all fully visible columns on screen.
//     Mod+Ctrl+C { center-visible-columns; }
//
//     Mod+C { center-column; }
//     Mod+Minus { set-column-width "-10%"; }
//     Mod+Equal { set-column-width "+10%"; }
//
//     // Finer height adjustments when in column with other windows.
//     Mod+Shift+Minus { set-window-height "-10%"; }
//     Mod+Shift+Equal { set-window-height "+10%"; }
// Mod+g { toggle-column-tabbed-display; }
//
//     // Finer width adjustments.
//     // This command can also:
//     // * set width in pixels: "1000"
//     // * adjust width in pixels: "-5" or "+5"
//     // * set width as a percentage of screen width: "25%"
//     // * adjust width as a percentage of screen width: "-10%" or "+10%"
//     // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
//     // set-column-width "100" will make the column occupy 200 physical screen pixels.
//     Mod+Minus { set-column-width "-10%"; }
//     Mod+Equal { set-column-width "+10%"; }
//
//     // Finer height adjustments when in column with other windows.
//     Mod+Shift+Minus { set-window-height "-10%"; }
//     Mod+Shift+Equal { set-window-height "+10%"; }
// Mod+g { toggle-column-tabbed-display; }
//
//     // Move the focused window between the floating and the tiling layout.
//     Mod+V       { toggle-window-floating; }
// Mod+Shift+v { switch-focus-between-floating-and-tiling; }
//
//     // Toggle tabbed column display mode.
//     // Windows in this column will appear as vertical tabs,
//     // rather than stacked on top of each other.
//
//     // Actions to switch layouts.
//     // Note: if you uncomment these, make sure you do NOT have
//     // a matching layout switch hotkey configured in xkb options above.
//     // Having both at once on the same hotkey will break the switching,
//     // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
//     // Mod+Space       { switch-layout "next"; }
//     // Mod+Shift+Space { switch-layout "prev"; }
//
//     Print { screenshot; }
//     Ctrl+Print { screenshot-screen; }
//     Alt+Print { screenshot-window; }
//
//     // Applications such as remote-desktop clients and software KVM switches may
//     // request that niri stops processing the keyboard shortcuts defined here
//     // so they may, for example, forward the key presses as-is to a remote machine.
//     // It's a good idea to bind an escape hatch to toggle the inhibitor,
//     // so a buggy application can't hold your session hostage.
//     //
//     // The allow-inhibiting=false property can be applied to other binds as well,
//     // which ensures niri always processes them, even when an inhibitor is active.
//     Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }
//
//     // The quit action will show a confirmation dialog to avoid accidental exits.
//     Mod+Shift+E { quit; }
//     Ctrl+Alt+Delete { quit; }
//
//     // Powers off the monitors. To turn them back on, do any input like
//     // moving the mouse or pressing any other key.
//     Mod+Shift+P { power-off-monitors; }
// }

debug {
    // preview-render "screencast"
    // preview-render "screen-capture"
    // disable-cursor-plane
    restrict-primary-scanout-to-matching-format
    // render-drm-device "/dev/dri/renderD129" // to use a different gpu for rendering niri
    wait-for-frame-completion-before-queueing
//     disable-resize-throttling    
//     disable-transactions // renders just resized window and others on window set
// skip-cursor-only-updates-during-vrr
//     deactivate-unfocused-windows
}
